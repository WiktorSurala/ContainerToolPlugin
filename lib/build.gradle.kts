/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    alias(libs.plugins.kotlin.jvm)
    `java-library`
    `java-gradle-plugin`
    `maven-publish`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

group = "de.surala.containertool"
version = "1.0.0"

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api(libs.commons.math3)

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation(libs.guava)

    testImplementation(gradleTestKit()) // For functional testing
    testImplementation(kotlin("test"))
    testImplementation(libs.jupiter) // For Kotlin unit tests
}

tasks.named<Test>("test") {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

gradlePlugin {
    plugins {
        create("dockerPlugin") {
            id = "de.surala.containertool.docker-plugin"
            implementationClass = "de.surala.containertool.dockerplugin.DockerPlugin"
        }
    }
}

publishing {
    repositories {
        mavenLocal()
    }
}
